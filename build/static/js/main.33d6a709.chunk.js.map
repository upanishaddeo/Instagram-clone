{"version":3,"sources":["firebase.js","Post.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Post","postId","user","username","caption","imageUrl","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","text","type","placeholder","value","onChange","e","target","disabled","onClick","event","preventDefault","add","displayName","timestamp","FieldValue","serverTimestamp","ImageUpload","image","setImage","progress","setProgress","setCaption","max","files","Button","ref","name","put","on","Math","round","bytesTransferred","totalBytes","error","console","log","alert","message","child","getDownloadURL","then","url","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","modalStyle","posts","setPosts","open","setOpen","openSignIn","setOpenSignIn","setUsername","password","setPassword","email","setEmail","setUser","onAuthStateChanged","authUser","id","post","Modal","onClose","style","Input","createUserWithEmailAndPassword","updateProfile","catch","signInWithEmailAndPassword","signOut","key","maxWidth","hideCaption","conatainerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.33d6a709.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyC3MMiAhNur_eKuA_mLZ0f-linB4b26TUo\",\r\n    authDomain: \"meet-them-up.firebaseapp.com\",\r\n    databaseURL: \"https://meet-them-up.firebaseio.com\",\r\n    projectId: \"meet-them-up\",\r\n    storageBucket: \"meet-them-up.appspot.com\",\r\n    messagingSenderId: \"715364326935\",\r\n    appId: \"1:715364326935:web:ca83d905f9f411a8454652\",\r\n    measurementId: \"G-7PYM182HLN\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\n\r\nexport { db, auth, storage };\r\n","import React, { useState, useEffect } from 'react'\r\nimport './Post.css';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { db } from './firebase';\r\nimport firebase from 'firebase';\r\nfunction Post({ postId, user, username, caption, imageUrl }) {\r\n    const [comments, setComments] = useState([]);\r\n    const [comment, setComment] = useState('');\r\n    useEffect(() => {\r\n        let unsubscribe;\r\n        if (postId) {\r\n            unsubscribe = db\r\n                .collection(\"posts\")\r\n                .doc(postId)\r\n                .collection(\"comments\")\r\n                .orderBy('timestamp', 'desc')\r\n                .onSnapshot((snapshot) => {\r\n                    setComments(snapshot.docs.map((doc) => doc.data()));\r\n                });\r\n        }\r\n\r\n        return () => {\r\n            unsubscribe();\r\n        };\r\n    }, [postId]);\r\n\r\n    const postComment = (event) => {\r\n        event.preventDefault();\r\n\r\n        db.collection(\"posts\").doc(postId).collection(\"comments\").add({\r\n            text: comment,\r\n            username: user.displayName,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n        });\r\n        setComment('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"post\">\r\n            <div className=\"post__header\">\r\n\r\n                <Avatar\r\n                    className=\"post__avatar\"\r\n                    alt=\"upnishad deo\"\r\n                    src={imageUrl}\r\n                />\r\n\r\n                <h3>{username}</h3>\r\n\r\n            </div>\r\n\r\n            <img className=\"post__image\" src={imageUrl} alt=\"\" />\r\n\r\n            <h4 className=\"post__text\"><strong>{username}</strong>: {caption}</h4>\r\n\r\n            <div className=\"post__comments\">\r\n                {comments.map((comment) => (\r\n                    <p>\r\n                        <strong>{comment.username}</strong> {comment.text}\r\n                    </p>\r\n                ))}\r\n            </div>\r\n\r\n            {user && (\r\n                <form className=\"post__commentBox\">\r\n                    <input\r\n                        className=\"post__input\"\r\n                        type=\"text\"\r\n                        placeholder=\"Add a comment...\"\r\n                        value={comment}\r\n                        onChange={(e) => setComment(e.target.value)}\r\n                    />\r\n                    <button\r\n                        disabled={!comment}\r\n                        className=\"post__button\"\r\n                        type=\"submit\"\r\n                        onClick={postComment}\r\n                    >post</button>\r\n                </form>\r\n            )}\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","import React, { useState } from 'react';\r\nimport { Button } from \"@material-ui/core\";\r\nimport { storage, db, } from \"./firebase\";\r\nimport firebase from \"firebase\";\r\nimport './ImageUpload.css';\r\n\r\n\r\n\r\nfunction ImageUpload({username}) {\r\n    const [image, setImage] = useState(null);\r\n    const [progress, setProgress] = useState(0);\r\n    const [caption, setCaption] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        if (e.target.files[0]) {\r\n            setImage(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    const handleUpload = () => {\r\n        const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n    \r\n        uploadTask.on(\r\n            \"state_changed\",\r\n            (snapshot) => {\r\n                // progress function....\r\n                const progress = Math.round(\r\n                    (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n                );\r\n                setProgress(progress);\r\n            },\r\n            (error) => {\r\n                // Error function... \r\n                console.log(error);\r\n                alert(error.message);\r\n            },\r\n            () => {\r\n                // complete function...\r\n                storage\r\n                    .ref(\"images\")\r\n                    .child(image.name)\r\n                    .getDownloadURL()\r\n                    .then(url => {\r\n                        // post image inside db (database)\r\n                        db.collection(\"posts\").add({\r\n                            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                            caption: caption,\r\n                            imageUrl: url,\r\n                            username: username\r\n                    });\r\n                            setProgress(0);\r\n                            setCaption(\"\");\r\n                            setImage(null);\r\n                })\r\n\r\n\r\n            }\r\n        )\r\n    \r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"imageupload\">\r\n            \r\n            {/* i want to have... */}\r\n            {/* caption input */}\r\n            {/* File picker */}\r\n            {/* Post Button */}\r\n            <progress value={progress} max=\"100\" />\r\n            <input type=\"text\" placeholder='Tell us what do you feel ?' onChange={event => setCaption(event.target.value)} value={caption} />\r\n            <input type=\"file\" onChange={handleChange} />\r\n            <Button onClick={handleUpload}>\r\n                Upload\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageUpload\r\n","import React, { useState, useEffect } from 'react';\nimport Post from './Post';\nimport './App.css';\nimport { db, auth } from './firebase';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport { Button, Input } from '@material-ui/core';\nimport ImageUpload from './ImageUpload';\nimport InstagramEmbed from 'react-instagram-embed';\n\n\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\n\n\n\nfunction App() {\n  const classes = useStyles();\n  const [modalStyle] = useState(getModalStyle);\n  const [posts, setPosts] = useState([]);\n  const [open, setOpen] = useState([false]);\n  const [openSignIn, setOpenSignIn] = useState(false);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [email, setEmail] = useState('');\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        // user has logged in...\n        console.log(authUser);\n        setUser(authUser);\n\n      } else {\n        // user has logged out...\n        setUser(null);\n      }\n    })\n\n    return () => {\n      // perform some cleanup here in order to stop duplicating the users agian and again\n      unsubscribe();\n    }\n\n  }, [user, username]);\n\n\n  useEffect(() => {\n    db.collection('posts').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      // every time a new post is added, this code is going to be fired.\n      setPosts(snapshot.docs.map(doc => ({\n        id: doc.id,\n        post: doc.data(),\n\n      })));\n    })\n  }, []);\n\n\n  const signUp = (event) => {\n    event.preventDefault();\n\n    auth\n      .createUserWithEmailAndPassword(email, password)\n      .then((authUser) => {\n        return authUser.user.updateProfile({\n          displayName: username\n        })\n      })\n      .catch((error) => alert(error.message));\n\n    setOpen(false);\n  }\n\n  const signIn = (event) => {\n    event.preventDefault();\n\n    auth\n      .signInWithEmailAndPassword(email, password)\n      .catch((error) => alert(error.message));\n\n    setOpenSignIn(false);\n\n  }\n  return (\n    <div className=\"app\">\n\n\n\n      <Modal\n        open={open}\n        onClose={() => setOpen(false)}\n\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n            <center>\n              <img\n                className=\"app__headerImage\"\n                src=\"https://upload-icon.s3.us-east-2.amazonaws.com/uploads/icons/png/6317933901561032520-512.png\"\n                alt=\"\"\n              />\n            </center>\n            <Input\n              type=\"text\"\n              placeholder=\"username\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n            <Input\n              placeholder=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <Input\n              placeholder=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <Button type=\"submit\" onClick={signUp}>Sign Up</Button>\n          </form>\n        </div>\n      </Modal>\n      <Modal\n        open={openSignIn}\n        onClose={() => setOpenSignIn(false)}\n\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n            <center>\n              <img\n                className=\"app__headerImage\"\n                src=\"https://upload-icon.s3.us-east-2.amazonaws.com/uploads/icons/png/6317933901561032520-512.png\"\n                alt=\"\"\n              />\n            </center>\n            <Input\n              placeholder=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <Input\n              placeholder=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <Button type=\"submit\" onClick={signIn}>Sign In</Button>\n          </form>\n\n        </div>\n      </Modal>\n\n      <div className=\"app__header\">\n\n        <img\n          className=\"app__headerImage1\"\n          src=\"https://upload-icon.s3.us-east-2.amazonaws.com/uploads/icons/png/6317933901561032520-512.png\"\n          alt=\"\"\n        />\n        {user ? (\n          <Button onClick={() => auth.signOut()}>Logout</Button>\n        ) : (\n            <div className=\"app__loginContainer\">\n              <Button onClick={() => setOpenSignIn(true)}>Sign in</Button>\n              <Button onClick={() => setOpen(true)}>Sign Up</Button>\n            </div>\n          )}\n      </div>\n      <div className=\"app__posts\">\n        <div className=\"app__postsLeft\">\n          {\n            posts.map(({ id, post }) => (\n              <Post key={id} postId={id} user={user} username={post.username} caption={post.caption} imageUrl={post.imageUrl} />\n            ))\n          }\n        </div>\n        <div className=\"app__postsRight\">\n          <InstagramEmbed\n            url='https://www.instagram.com/p/B_uf9dmAGPw/'\n            maxWidth={320}\n            hideCaption={false}\n            conatainerTagName='div'\n            protocol=''\n            injectScript\n            onLoading={() => { }}\n            onSuccess={() => { }}\n            onAfterRender={() => { }}\n            onFailure={() => { }}\n          />\n        </div>\n\n      </div>\n\n\n\n      {user?.displayName ? (\n        <ImageUpload username={user.displayName} />\n      ) : (\n          <h3>Login to start your journey on Meet-Them-up</h3>\n        )}\n\n\n      {/* header */}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}